// <auto-generated />
using System;
using FirstReg.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FirstReg.Core.Migrations
{
    [DbContext(typeof(AppDB))]
    partial class AppDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FirstReg.Data.AccessRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId", "Role");

                    b.ToTable("AccessRoles");
                });

            modelBuilder.Entity("FirstReg.Data.AnnualReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("AnnualReports");
                });

            modelBuilder.Entity("FirstReg.Data.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("Section")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("FirstReg.Data.AuditLogView", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Section")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("AuditLog", (string)null);
                });

            modelBuilder.Entity("FirstReg.Data.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("FirstReg.Data.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("FirstReg.Data.Dividend", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("AmountDeclared")
                        .HasColumnType("money");

                    b.Property<DateTime>("ClosureDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DatePayable")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PaymentNo")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("RegisterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("YearEnd")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("RegisterId");

                    b.ToTable("Dividends");
                });

            modelBuilder.Entity("FirstReg.Data.ECertHolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("IdFileName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhotoFileName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("ECertHolders");
                });

            modelBuilder.Entity("FirstReg.Data.ECertHolding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CertificateNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClearingNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("HolderId")
                        .HasColumnType("int");

                    b.Property<int>("RegisterId")
                        .HasColumnType("int");

                    b.Property<decimal>("Units")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("HolderId");

                    b.HasIndex("RegisterId");

                    b.ToTable("ECertHoldings");
                });

            modelBuilder.Entity("FirstReg.Data.ECertRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthLetterFileName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Brief")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StockBrokerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StockBrokerId");

                    b.ToTable("ECertRequests");
                });

            modelBuilder.Entity("FirstReg.Data.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Html")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Faqs");
                });

            modelBuilder.Entity("FirstReg.Data.FaqSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FaqSections");
                });

            modelBuilder.Entity("FirstReg.Data.FormResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UniqueKey")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ValidationCode")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UniqueKey");

                    b.ToTable("FormResponses");
                });

            modelBuilder.Entity("FirstReg.Data.LastId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RegisterHolding")
                        .HasColumnType("int");

                    b.Property<int>("ShareHolders")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LastIds");
                });

            modelBuilder.Entity("FirstReg.Data.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("FirstReg.Data.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<int>("Gateway")
                        .HasColumnType("int");

                    b.Property<int>("Item")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FirstReg.Data.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Brief")
                        .IsRequired()
                        .HasColumnType("varchar(750)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Html")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<bool>("Promoted")
                        .HasColumnType("bit");

                    b.Property<string>("Thumb")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("FirstReg.Data.PostCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PostCategories");
                });

            modelBuilder.Entity("FirstReg.Data.Register", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(350)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RCNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Symbol")
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Registers");
                });

            modelBuilder.Entity("FirstReg.Data.RegisterHolding", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AccountNo")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(750)");

                    b.Property<string>("ClearingNo")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RegisterId")
                        .HasColumnType("int");

                    b.Property<decimal>("Units")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("RegisterHoldings");
                });

            modelBuilder.Entity("FirstReg.Data.RegisterIdModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("Registers", (string)null);
                });

            modelBuilder.Entity("FirstReg.Data.RegisterSHSumm", b =>
                {
                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("DetailsUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExportUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ListUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Max")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("MaxDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MaxUnits")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Min")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("MinDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MinUnits")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RegId")
                        .HasColumnType("int");

                    b.Property<string>("S")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("vw_RegisterSHSumm", (string)null);
                });

            modelBuilder.Entity("FirstReg.Data.RegisterView", b =>
                {
                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RCNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("vw_Registers", (string)null);
                });

            modelBuilder.Entity("FirstReg.Data.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1bfa7a25-b1a2-42f0-bccf-a4a87f5e82is",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("FirstReg.Data.ShareHolding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("RegisterId")
                        .HasColumnType("int");

                    b.Property<int>("ShareHolderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Units")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Value")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("RegisterId");

                    b.HasIndex("ShareHolderId");

                    b.ToTable("ShareHoldings");
                });

            modelBuilder.Entity("FirstReg.Data.ShareOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowPublicOffer")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowRightIssue")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RegisterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UniqueKey")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RegisterId");

                    b.HasIndex("UniqueKey");

                    b.ToTable("ShareOffers");
                });

            modelBuilder.Entity("FirstReg.Data.ShareSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FormResponseId")
                        .HasColumnType("int");

                    b.Property<int>("NoOfShares")
                        .HasColumnType("int");

                    b.Property<string>("PaymentId")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Rights")
                        .HasColumnType("int");

                    b.Property<int>("ShareOfferId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormResponseId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ShareOfferId");

                    b.ToTable("ShareSubscriptions");
                });

            modelBuilder.Entity("FirstReg.Data.Shareholder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ActionRequired")
                        .HasColumnType("bit");

                    b.Property<string>("CardId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClearingNo")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("Downloaded")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsCompany")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LegacyAccId")
                        .HasColumnType("int");

                    b.Property<string>("LegacyId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LegacyUsername")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MAccessPin")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryPhone")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryPhone")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Signature")
                        .HasColumnType("varchar(MAX)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(350)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VerifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Shareholders");
                });

            modelBuilder.Entity("FirstReg.Data.ShareholderView", b =>
                {
                    b.Property<bool>("AllowGroup")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClearingNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.ToTable((string)null);

                    b.ToView("vw_Shareholders", (string)null);
                });

            modelBuilder.Entity("FirstReg.Data.ShareholdingView", b =>
                {
                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClearingNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Register")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisterCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegisterId")
                        .HasColumnType("int");

                    b.Property<int>("ShareHolderId")
                        .HasColumnType("int");

                    b.Property<string>("Shareholder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShareholderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("Units")
                        .HasColumnType("real");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.ToTable((string)null);

                    b.ToView("vw_Shareholdings", (string)null);
                });

            modelBuilder.Entity("FirstReg.Data.StockBroker", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Fax")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryPhone")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(350)");

                    b.HasKey("Id");

                    b.ToTable("StockBrokers");
                });

            modelBuilder.Entity("FirstReg.Data.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("money");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("FirstReg.Data.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");
                });

            modelBuilder.Entity("FirstReg.Data.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("Resolved")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("FirstReg.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("AllowGroup")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasDefaultValueSql("('')");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            AllowGroup = false,
                            ConcurrencyStamp = "01577897-c74f-4339-8eus-5d7b9b15f684",
                            Email = "support@clearwox.com",
                            EmailConfirmed = true,
                            FullName = "Host Account",
                            LockoutEnabled = true,
                            NormalizedEmail = "SUPPORT@CLEARWOX.COM",
                            NormalizedUserName = "HOST",
                            PasswordHash = "AQAAAAEAACcQAAAAECQvPNb43OCmnOTgI+0vIUlYKHiaeb86CAkOiC6cqgnw63KGA0akaDtIMS8AeZ/UEg==",
                            PhoneNumber = "+234 1 279 9880",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "UNGTKDF5EN5BRYOMVKQ5DQ6ZGRTZLHYK",
                            TwoFactorEnabled = false,
                            Type = 4,
                            UserName = "host"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            AllowGroup = false,
                            ConcurrencyStamp = "01577897-c74f-4339-b368-5d7b9b15f684",
                            Email = "admin@firstreginstrars.com",
                            EmailConfirmed = true,
                            FullName = "Super Admin",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@FIRSTREGINSTRARS.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECQvPNb43OCmnOTgI+0vIUlYKHiaeb86CAkOiC6cqgnw63KGA0akaDtIMS8AeZ/UEg==",
                            PhoneNumber = "+234 1 279 9880",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "UNGTKDF5EN5BRYOMVKQ5DQ6ZGRTZLHYK",
                            TwoFactorEnabled = false,
                            Type = 4,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FirstReg.Data.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("FirstReg.Data.AccessRole", b =>
                {
                    b.HasOne("FirstReg.Data.User", "User")
                        .WithMany("AccessRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FirstReg.Data.Dividend", b =>
                {
                    b.HasOne("FirstReg.Data.Register", "Register")
                        .WithMany("Dividends")
                        .HasForeignKey("RegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Register");
                });

            modelBuilder.Entity("FirstReg.Data.ECertHolder", b =>
                {
                    b.HasOne("FirstReg.Data.ECertRequest", "ECertRequest")
                        .WithMany("ECertHolders")
                        .HasForeignKey("RequestId")
                        .IsRequired();

                    b.Navigation("ECertRequest");
                });

            modelBuilder.Entity("FirstReg.Data.ECertHolding", b =>
                {
                    b.HasOne("FirstReg.Data.ECertHolder", "ECertHolder")
                        .WithMany("ECertHoldings")
                        .HasForeignKey("HolderId")
                        .IsRequired();

                    b.HasOne("FirstReg.Data.Register", "Register")
                        .WithMany("ECertHoldings")
                        .HasForeignKey("RegisterId")
                        .IsRequired();

                    b.Navigation("ECertHolder");

                    b.Navigation("Register");
                });

            modelBuilder.Entity("FirstReg.Data.ECertRequest", b =>
                {
                    b.HasOne("FirstReg.Data.StockBroker", "StockBroker")
                        .WithMany("ECertRequests")
                        .HasForeignKey("StockBrokerId")
                        .IsRequired();

                    b.Navigation("StockBroker");
                });

            modelBuilder.Entity("FirstReg.Data.Faq", b =>
                {
                    b.HasOne("FirstReg.Data.FaqSection", "Section")
                        .WithMany("Faqs")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("FirstReg.Data.Message", b =>
                {
                    b.HasOne("FirstReg.Data.Ticket", "Ticket")
                        .WithMany("Messages")
                        .HasForeignKey("TicketId")
                        .IsRequired();

                    b.HasOne("FirstReg.Data.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("FirstReg.Data.Payment", b =>
                {
                    b.HasOne("FirstReg.Data.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FirstReg.Data.Post", b =>
                {
                    b.HasOne("FirstReg.Data.Author", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FirstReg.Data.PostCategory", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FirstReg.Data.Register", b =>
                {
                    b.HasOne("FirstReg.Data.User", "User")
                        .WithOne("Register")
                        .HasForeignKey("FirstReg.Data.Register", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FirstReg.Data.ShareHolding", b =>
                {
                    b.HasOne("FirstReg.Data.Register", "Register")
                        .WithMany("Holdings")
                        .HasForeignKey("RegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FirstReg.Data.Shareholder", "Shareholder")
                        .WithMany("Holdings")
                        .HasForeignKey("ShareHolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Register");

                    b.Navigation("Shareholder");
                });

            modelBuilder.Entity("FirstReg.Data.ShareOffer", b =>
                {
                    b.HasOne("FirstReg.Data.Register", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FirstReg.Data.ShareOfferPublic", "PublicOffer", b1 =>
                        {
                            b1.Property<int>("ShareOfferId")
                                .HasColumnType("int");

                            b1.Property<int>("Factor")
                                .HasColumnType("int");

                            b1.Property<int>("Minimum")
                                .HasColumnType("int");

                            b1.Property<decimal>("Price")
                                .HasColumnType("money");

                            b1.HasKey("ShareOfferId");

                            b1.ToTable("ShareOffers");

                            b1.WithOwner()
                                .HasForeignKey("ShareOfferId");
                        });

                    b.OwnsOne("FirstReg.Data.ShareOfferRights", "RightIssue", b1 =>
                        {
                            b1.Property<int>("ShareOfferId")
                                .HasColumnType("int");

                            b1.Property<int>("Factor")
                                .HasColumnType("int");

                            b1.Property<int>("NoOfShares")
                                .HasColumnType("int");

                            b1.Property<decimal>("Price")
                                .HasColumnType("money");

                            b1.Property<int>("Rights")
                                .HasColumnType("int");

                            b1.HasKey("ShareOfferId");

                            b1.ToTable("ShareOffers");

                            b1.WithOwner()
                                .HasForeignKey("ShareOfferId");
                        });

                    b.Navigation("PublicOffer")
                        .IsRequired();

                    b.Navigation("Register");

                    b.Navigation("RightIssue")
                        .IsRequired();
                });

            modelBuilder.Entity("FirstReg.Data.ShareSubscription", b =>
                {
                    b.HasOne("FirstReg.Data.FormResponse", "Response")
                        .WithMany()
                        .HasForeignKey("FormResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FirstReg.Data.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("FirstReg.Data.ShareOffer", "Offer")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ShareOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Payment");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("FirstReg.Data.Shareholder", b =>
                {
                    b.HasOne("FirstReg.Data.User", "User")
                        .WithMany("Shareholders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FirstReg.Data.StockBroker", b =>
                {
                    b.HasOne("FirstReg.Data.User", "User")
                        .WithOne("StockBroker")
                        .HasForeignKey("FirstReg.Data.StockBroker", "Id")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FirstReg.Data.Subscription", b =>
                {
                    b.HasOne("FirstReg.Data.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FirstReg.Data.Ticket", b =>
                {
                    b.HasOne("FirstReg.Data.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("FirstReg.Data.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("FirstReg.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("FirstReg.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("FirstReg.Data.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FirstReg.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("FirstReg.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FirstReg.Data.Author", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("FirstReg.Data.ECertHolder", b =>
                {
                    b.Navigation("ECertHoldings");
                });

            modelBuilder.Entity("FirstReg.Data.ECertRequest", b =>
                {
                    b.Navigation("ECertHolders");
                });

            modelBuilder.Entity("FirstReg.Data.FaqSection", b =>
                {
                    b.Navigation("Faqs");
                });

            modelBuilder.Entity("FirstReg.Data.PostCategory", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("FirstReg.Data.Register", b =>
                {
                    b.Navigation("Dividends");

                    b.Navigation("ECertHoldings");

                    b.Navigation("Holdings");
                });

            modelBuilder.Entity("FirstReg.Data.ShareOffer", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("FirstReg.Data.Shareholder", b =>
                {
                    b.Navigation("Holdings");
                });

            modelBuilder.Entity("FirstReg.Data.StockBroker", b =>
                {
                    b.Navigation("ECertRequests");
                });

            modelBuilder.Entity("FirstReg.Data.Ticket", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("FirstReg.Data.User", b =>
                {
                    b.Navigation("AccessRoles");

                    b.Navigation("Messages");

                    b.Navigation("Payments");

                    b.Navigation("Register");

                    b.Navigation("Shareholders");

                    b.Navigation("StockBroker");

                    b.Navigation("Subscriptions");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
